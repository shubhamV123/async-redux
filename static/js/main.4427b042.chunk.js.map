{"version":3,"sources":["actions/index.js","reducers/index.js","components/Picker.js","components/Posts.js","containers/App.js","index.js"],"names":["selectSubreddit","subreddit","type","invalidateSubreddit","fetchPosts","dispatch","requestPosts","fetch","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","console","log","isFetching","didInvalidate","shouldFetchPosts","items","action","lastUpdated","combineReducers","selectedSubreddit","Picker","value","options","onChange","e","target","option","key","Posts","post","i","title","App","handleChange","val","props","handleRefreshClick","preventDefault","this","prevProps","isEmpty","length","toLocaleTimeString","onClick","style","opacity","Component","connect","middlewares","ReduxThunk","store","createStore","reducer","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4427b042.chunk.js","sourcesContent":["export const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\n\n\nexport const selectSubreddit = subreddit => ({\n    type: SELECT_SUBREDDIT,\n    subreddit\n})\n\nexport const invalidateSubreddit = subreddit => ({\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n})\n\nexport const requestPosts = subreddit => ({\n    type: REQUEST_POSTS,\n    subreddit\n})\n\nexport const receivePosts = (subreddit, json) => ({\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n})\n\nconst fetchPosts = subreddit => dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n        .then(response => response.json())\n        .then(json => dispatch(receivePosts(subreddit, json)))\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n    const posts = state.postsBySubreddit[subreddit];\n    console.log(\"Posts\", posts);\n    if (!posts) {\n        return true\n    }\n    if (posts.isFetching) {\n        return false\n    }\n    return posts.didInvalidate\n}\n\n//Thunk function\n\nexport const fetchPostsIfNeeded = subreddit => (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n        return dispatch(fetchPosts(subreddit))\n    }\n}","\nimport { combineReducers } from 'redux'\n\nimport {\n    SELECT_SUBREDDIT,\n    INVALIDATE_SUBREDDIT,\n    REQUEST_POSTS,\n    RECEIVE_POSTS\n} from '../actions'\n\n\nconst selectedSubreddit = (state = \"reactjs\", action) => {\n    switch (action.type) {\n        case SELECT_SUBREDDIT:\n            return action.subreddit\n        default:\n            return state\n    }\n}\nconst posts = (state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n}, action) => {\n    switch (action.type) {\n        case INVALIDATE_SUBREDDIT:\n            return {\n                ...state,\n                didInvalidate: true\n            }\n        case REQUEST_POSTS:\n            return {\n                ...state,\n                isFetching: true,\n                didInvalidate: false\n            }\n        case RECEIVE_POSTS: {\n            return {\n                ...state,\n                isFetching: false,\n                didInvalidate: false,\n                items: action.posts,\n                lastUpdated: action.receivedAt\n            }\n        }\n        default:\n            return state\n    }\n}\n\nconst postsBySubreddit = (state = {}, action) => {\n    switch (action.type) {\n        case INVALIDATE_SUBREDDIT:\n        case RECEIVE_POSTS:\n        case REQUEST_POSTS:\n            return {\n                ...state,\n                [action.subreddit]: posts(state[action.subreddit], action)\n            }\n        default:\n            return state\n    }\n}\n\nexport default combineReducers({ selectedSubreddit, postsBySubreddit })","import React from 'react'\n\nconst Picker = ({ value, options, onChange }) => {\n    return (\n        <div>\n            <h1>{value}</h1>\n            <select onChange={e => onChange(e.target.value)} value={value}>\n                {options.map(option =>\n                    <option value={option} key={option}>\n                        {option}\n                    </option>)\n                }\n\n            </select>\n        </div>\n    )\n}\n\nexport default Picker\n","import React from 'react'\n\nconst Posts = ({ posts }) => (\n    <ul>\n        {posts.map((post, i) =>\n            <li key={i}>{post.title}</li>\n        )}\n    </ul>\n)\n\nexport default Posts\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit } from '../actions';\nimport Picker from '../components/Picker';\nimport Posts from '../components/Posts'\n\nclass App extends Component {\n\n    componentDidMount() {\n        const { dispatch, selectedSubreddit } = this.props;\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n            const { dispatch, selectedSubreddit } = this.props\n            dispatch(fetchPostsIfNeeded(selectedSubreddit))\n        }\n    }\n\n    handleChange = (val) => {\n        this.props.dispatch(selectSubreddit(val))\n    }\n    handleRefreshClick = e => {\n        e.preventDefault()\n\n        const { dispatch, selectedSubreddit } = this.props\n        dispatch(invalidateSubreddit(selectedSubreddit))\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n    render() {\n        const { selectedSubreddit, isFetching, posts, lastUpdated } = this.props;\n        const isEmpty = posts.length === 0\n        return (\n            <div>\n                <Picker value={selectedSubreddit} onChange={this.handleChange} options={['reactjs', 'frontend']} />\n                <p>\n                    {lastUpdated &&\n                        <span>\n                            Last updated at {new Date(lastUpdated).toLocaleTimeString()}.\n              {' '}\n                        </span>\n                    }\n                    {!isFetching &&\n                        <button onClick={this.handleRefreshClick}>\n                            Refresh\n                        </button>\n                    }\n                </p>\n                {isEmpty\n                    ? (isFetching ? <h2>Loading...</h2> : <h2>Empty.</h2>)\n                    : <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n                        <Posts posts={posts} />\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const { selectedSubreddit, postsBySubreddit } = state;\n\n    const {\n        isFetching,\n        lastUpdated,\n        items: posts\n    } = postsBySubreddit[selectedSubreddit] || {\n        isFetching: true,\n        items: []\n    }\n    return {\n        selectedSubreddit,\n        posts,\n        isFetching,\n        lastUpdated\n    }\n}\n\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport ReduxThunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger'\n\n\nimport './index.css';\nimport reducer from './reducers'\nimport App from './containers/App';\n\n//Add middlewares\nconst middlewares = [ReduxThunk];\nif (process.env.NODE_ENV !== \"production\") {\n    middlewares.push(createLogger())\n}\n\n//CreateStore\nconst store = createStore(reducer, applyMiddleware(...middlewares))\n\n//Wrap in middlewares\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}